package com.pousar.domain.usuario;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;



import com.pousar.domain.ValidacaoException;
import com.pousar.jpa.BaseService;

public class UsuarioService extends BaseService<Usuario> {

	public UsuarioService() {
		super(Usuario.class);
	}

	@Override
	public Usuario salvar(Usuario usuario) {
		if (usuario.getNome() == null || usuario.getNome().isEmpty()) {
			throw new ValidacaoException("O campo nome nao pode estar vazio");
		}
		if (usuario.getEmail() == null || usuario.getEmail().isEmpty()) {
			throw new ValidacaoException("O campo email nao pode estar vazio");
		}
		if (usuario.getSenha() == null || usuario.getSenha().isEmpty()) {
			throw new ValidacaoException("O campo senha nao pode estar vazio");
		}
		return super.salvar(usuario);

	}

	public Usuario buscarParaLogin(String email, String senha) {
		// TODO: implementar login buscando dados no banco de dados

		if ("admin@pousar.com".equals(email) && "123".equals(senha)) {
			Usuario usuario = new Usuario();
			usuario.setEmail("admin@pousar.com");
			usuario.setNome("Administrador");
			usuario.setSenha("123");

			return usuario;
		}
		return null;
	}

	public Usuario buscarPorEmail(String email) {
		EntityManager em = EntityManagerUtil.criarEntityManager();
		try {
			StringBuilder jpql = new StringBuilder();
			jpql.append("SELECT i FROM Investimento i ");
			jpql.append("WHERE UPPER(i.descricao) LIKE UPPER(:descricao) order by i.data");

			TypedQuery<Investimento> query = em.createQuery(jpql.toString(), Investimento.class);
			query.setParameter("descricao", "%" + descricao + "%");
			return query.getResultList();
		} finally {
			em.close();
		}
	}

	public List<Usuario> buscarPor(String email, String nome) {
		// TODO: Buscar usuario por email ou nome
		return new ArrayList<>();
	}
}
